[tox]
skip_missing_interpreters = true
requires = tox >= 3.20.0

[testenv]
basepython = {spell,clean,report,codecov,graphs,quickstart,apidoc,deploy}: {env:TOXPYTHON:python3}
passenv =
    *
    # See https://github.com/codecov/codecov-python/blob/5b9d539a6a09bc84501b381b563956295478651a/README.md#using-tox
    codecov: TOXENV
    codecov: CI
    codecov: TRAVIS TRAVIS_*
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHOUNBUFFERED=yes
    PIP_DISABLE_PIP_VERSION_CHECK=1
    VIRTUALENV_NO_DOWNLOAD=0
    DOCS_BUILD_LOCATION=dist/docs
deps =
    setuptools >= 40.0.0
    -rrequirements/docs.txt
skip_install = true


############## DOCUMENTATION OPERATIONS ##############
[testenv:quickstart]
description = Initialize the sphinx-docs infrastructure. You can run this 
    command once, after you just created a new project/code-repo.
changedir = docs
commands = sphinx-quickstart


[testenv:apidoc]
description = Populate rst files with directives to process docstrings. To force re-creation of
    files that already exist, you can use the -f flag; eg command: tox -c tox-dev.ini -e apidocs -- -f. To override the
    default filename 'modules', of the table of contents, you can use the --tocfile flag (takes 1 argument); eg command:
    tox -c tox-dev.ini -e apidoc -v -- --tocfile my_contents_filename
commands = sphinx-apidoc -o docs src/so_magic {posargs}



#### TESTING DOCS ####
[testenv:spell]
description = Check the documentation spelling. Checks spelling both for the .rst files in 'docs' directory and for the
    code docstrings. Writes the errors in separate .spelling files, in the {env:DOCS_BUILD_LOCATION:dist/docs}
    directory. Requires as external dependency the "pyenchant C library", which you should install manually (eg
    command on Linux: sudo apt install python-pyenchant).
setenv =
    {[testenv]setenv}
    SPELLCHECK=1
deps =
    {[testenv]deps}
    pyenchant
commands = sphinx-build -E -b spelling docs {env:DOCS_BUILD_LOCATION:dist/docs}


############## DEPLOY ##############

# usage 1
# deploy to testpypi while ignoring collisions (case where the version already exists on remote)
# python -m tox -c tox-dev.ini -e deploy

# usage 2
# deploy to pypi
# PYPI_SERVER=pypi python -m tox -c tox-dev.ini -e deploy

[testenv:deploy]
description = Deploy the python package to be hosted in a pypi server. Requires the SO_MAGIC_RELEASE_VERSION
    environment variable to contain the string that represents the semantic version (eg 0.5.3 or 1.0.0) under which
    to release the so_magic package to pypi. By default, deploys to the official test-pypi server.
    If you want to deploy to the "production" pypi then you have to set the PYPI_SERVER environment
    variable like `export PYPI_SERVER=pypi`
deps =
    keyring==21.3.0
    twine>=3.4.0,<4.0.0
commands_pre =
    python setup.py sdist bdist_wheel
    python -m twine check dist/so[\-_]magic-{env:SO_MAGIC_RELEASE_VERSION:PLEASE_INDICATE_THE_SEM_VER_FOR_RELEASE}*
    python -m twine {posargs:upload --non-interactive} --repository {env:PYPI_SERVER:testpypi --skip-existing} dist/so[\-_]magic-{env:SO_MAGIC_RELEASE_VERSION:PLEASE_INDICATE_THE_SEM_VER_FOR_RELEASE}* --verbose


###### COVERAGE ######
[testenv:clean]
deps = coverage
commands = coverage erase

[testenv:report]
deps = coverage
commands = {posargs:coverage report}

[testenv:format-report]
deps =
    coverage
    py<2.0.0
commands =
    coverage xml
    coverage html


###### CODECOV ######
[testenv:codecov]
description = Send code coverage data to codecov.io
passenv = TOXENV CI TRAVIS TRAVIS_* CODECOV_*
deps = codecov
commands = codecov
