[tox]
envlist = clean,check,py36-cov,py37-cov,py38-cov
skip_missing_interpreters = true
requires = tox-conda

[testenv]
description = Install the project dependencies in the environment (as python 
    packages), build so-magic from the code, install it (in the environment) and
     run the test suite using pytest.
basepython = {clean,check}: {env:TOXPYTHON:python3}
passenv =
    *
setenv =
; It will overide variables in passenv in case of collision
    PYTHONPATH={toxinidir}/tests
    PYTHOUNBUFFERED=yes
    PIP_DISABLE_PIP_VERSION_CHECK=1
    VIRTUALENV_NO_DOWNLOAD=0
    TEST_RESULTS_DIR={toxinidir}/test-results
    JUNIT_TEST_RESULTS=junit-test-results.xml
conda_channels = conda-forge
deps =
    -rrequirements/base.txt
    -rrequirements/dev.txt
conda_deps = somoclu
commands = {posargs:pytest --cov --cov-report=term-missing -vv --junitxml={env:TEST_RESULTS_DIR:test-results}/{env:JUNIT_TEST_RESULTS:junit-test-results.xml}}



#### RUN TEST SUITE & MEASURE CODE COVERAGE ####
[testenv:py36-cov]
description = {[testenv]description} Runs against python3.6 and measures code coverage.
basepython = {env:TOXPYTHON:python3.6}

[testenv:py37-cov]
description = {[testenv]description} Runs against python3.7 and measures code coverage.
basepython = {env:TOXPYTHON:python3.7}

[testenv:py38-cov]
description = {[testenv]description} Runs against python3.8 and measures code coverage.
basepython = {env:TOXPYTHON:python3.8}


#### RUN TEST SUITE ####
[nocov]
commands = pytest {posargs:-vv}

[testenv:py36]
description = {[testenv]description} Runs using a python3.6 interpreter.
basepython = {env:TOXPYTHON:python3.6}
commands = {[nocov]commands}

[testenv:py37]
description = {[testenv]description} Runs using a python3.7 interpreter.
basepython = {env:TOXPYTHON:python3.7}
commands = {[nocov]commands}

[testenv:py38]
description = {[testenv]description} Runs using a python3.8 interpreter.
basepython = {env:TOXPYTHON:python3.8}
commands = {[nocov]commands}


#### SUPPORT ####
[testenv:clean]
description = Remove any data resulted from measuring code coverage, while running the test suite. Useful before running
    the test suite (eg unit-tests).
deps = coverage
skip_install = True
commands = coverage erase

[testenv:check]
description = Run the build step (creates a source distribution and a wheel) and test the produced artefacts with twine
    to make sure the packaging configuration (that is to be deployed in production pypi server) is valid
deps =
    docutils
    readme-renderer
    pygments
    check-manifest
    twine
skip_install = True
commands =
    check-manifest
    python setup.py sdist bdist_wheel
    twine check dist/so-magic-*.tar.gz
    twine check dist/so_magic-*.whl


#### DEVELOPMENT ####
[testenv:dev]
description = Install dependencies, install so-magic in 'development' mode (
    directly links the source code files, instead of building and installing, so
    that every time you change your code you do not have to re-install before 
    testing) and run the test suite using the python3.8 interpreter.
basepython = {env:TOXPYTHON:python3.8}
use_develop = true
commands = {[nocov]commands}


[testenv:dev-cov]
description = Install dependencies, install so-magic in 'development' mode (
    directly links the source code files, instead of building and installing, so
    that every time you change your code you do not have to re-install before 
    testing) and run the test suite, while measuring code coverage, using the 
    python3.8 interpreter.
basepython = {env:TOXPYTHON:python3.8}
use_develop = true
commands = pytest --cov --cov-report=term-missing {posargs: -vv --junitxml={env:TEST_RESULTS_DIR:test-results}/{env:JUNIT_TEST_RESULTS:junit-test-results.xml}}



#### DOCS ####
[docs-base]
deps =
    -rrequirements/base.txt
    -rrequirements/docs.txt


[testenv:docs]
description = Build the documentation. Read the source .rst and .py files and 
    build ready-to-render/ready-to-serve html (eg you can host it in a 
    'read the docs server'). Before building, any sphinx doctest found is 
    executed. After building, both word spelling and url links proper redirects 
    are checked.
basepython = {env:TOXPYTHON:python3.8}
setenv =
    {[testenv]setenv}
    SPELLCHECK=1
deps = {[docs-base]deps}
use_develop = true
commands =
    sphinx-build {posargs:-E} -b doctest docs {env:DOCS_BUILD_LOCATION:dist/docs}
    sphinx-build {posargs:-E} -b html docs {env:DOCS_BUILD_LOCATION:dist/docs}
    sphinx-build -b spelling docs {env:DOCS_BUILD_LOCATION:dist/docs}
    sphinx-build -b linkcheck docs {env:DOCS_BUILD_LOCATION:dist/docs}
    python -c 'print("View documentation at {env:DOCS_BUILD_LOCATION:dist/docs}/index.html; it is ready to be hosted!")'


[testenv:docs-basic]
description = Build the documentation. Reads the source .rst and .py files and 
    build ready-to-render/ready-to-serve html (eg you can host it in a 
    'read the docs server'). Before building, any sphinx doctest found is 
    executed.
basepython = {env:TOXPYTHON:python3.8}
deps = {[docs-base]deps}
use_develop = true
commands =
    sphinx-build {posargs:-E} -b doctest docs {env:DOCS_BUILD_LOCATION:dist/docs}
    sphinx-build {posargs:-E} -b html docs {env:DOCS_BUILD_LOCATION:dist/docs}
    python -c 'print("View documentation at {env:DOCS_BUILD_LOCATION:dist/docs}/index.html; it is ready to be hosted!")'


[testenv:linkcheck]
description = Check all url links existing in the documentation pages that they 
    indeed redirect to resource on the web, when clicked. Any found errors are 
    stored in the {env:DOCS_BUILD_LOCATION:dist/docs}/output.txt file.
basepython = {env:TOXPYTHON:python3.8}
deps = -rrequirements/docs.txt
use_develop = true
commands = sphinx-build {posargs:-E} -b linkcheck docs {env:DOCS_BUILD_LOCATION:dist/docs}


###### PYDEPS ######
[testenv:graphs]
description = Visualise the dependency graphs (roughly which module imports which), by examining the
    Python code. The dependency graph(s) are rendered in .svg file(s) and saved on the disk. You can
    use the SO_MAGIC_DEPS_GRAPHS environment variable to determine the directory location to store the visualisation(s). If
    the variable is not supplied then the default folder 'so-magic-dependency-graphs', inside the project's root folder, is used. If the directory does not exist it gets created.
    Requires that the 'dot' executable is in your PATH. Installing the graphviz library should make the dot executable available
    in PATH. Installing 'graphviz':
    * For Linux users using Debian-based distributions (ie Ubuntu, Debian, Mint), please run "sudo apt install graphviz"
    * For MacOS users Homebrew, please run "brew install graphviz"
basepython = {env:TOXPYTHON:python3.8}
deps =
    attrs
    pandas
    numpy
    scikit-learn
    pydeps==1.9.13
passenv =
    HOME
    SO_MAGIC_DEPS_GRAPHS
setenv =
    {[testenv]setenv}
    DEPS_DEFAULT_LOCATION = so-magic-dependency-graphs
skip_install = true
commands_pre =
    - python -c 'import os; my_dir = os.getcwd(); os.mkdir(os.path.join(my_dir, "{env:SO_MAGIC_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}"))'
commands =
    pydeps --version

    # --max-bacon : exclude nodes that are more than n hops away
    # (default=2, 0 -> infinite)

    # --min-cluster-size : the minimum number of nodes a dependency must have before being clustered (default=0)

    # --max-cluster-size : the maximum number of nodes a dependency can have before the cluster is collapsed to a single node (default=0)
    # --keep-target-cluster : draw target module as a cluster

    # Draw only the source code package inner dependencies
    pydeps src/so_magic --only so_magic --noshow -o {env:SO_MAGIC_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}/so_magic_inner_deps.svg
    # Draw the source code package inner and external dependencies
    pydeps src/so_magic --cluster --noshow -o {env:SO_MAGIC_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}/so_magic_deps.svg

    # Visualize the package inner dependencies and abstract the external (eg with numpy, pandas, etc) ones
    # Draw the source code package inner and minimum external dependencies
    pydeps src/so_magic --max-cluster-size=2 --keep-target-cluster --noshow -o {env:SO_MAGIC_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}/so_magic_target_cluster_deps_one_arrow.svg

    # Draw the source code package inner and all external dependencies
    pydeps src/so_magic --keep-target-cluster --noshow -o {env:SO_MAGIC_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}/so_magic_target_cluster_deps_all_arrows.svg

    # increasing max-bacon reveales the dependencies of the dependencies..
    ; pydeps src/so_magic --max-bacon=8 --max-cluster-size=2 --keep-target-cluster --noshow -o {env:SO_MAGIC_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}/so_magic-n4.svg

    # increasing max-cluster-size reveales more modules inside the external dependencies and their dependencies..
    ; pydeps src/so_magic --max-bacon=8 --max-cluster-size=5 --keep-target-cluster --noshow -o {env:SO_MAGIC_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}/so_magic-n5.svg

    python -c 'import os; my_dir = os.getcwd(); print("\nGenerated dependency graph(s), as .svg files."); print("The graph(s) reside in the \"" + os.path.join(my_dir, "{env:SO_MAGIC_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}") + "\" directory and you can now view them ie in your browser.\n")'


## LINT ##

[testenv:pylint]
description = Run the Pylint tool to analyse the Python code and output information about errors,
    potential problems and convention violations
basepython = {env:TOXPYTHON:python3.8}
deps =
    attrs
    pandas
    numpy
    scikit-learn
    pylint==2.7.4
skip_install = true
commands = python -m pylint {posargs:{toxinidir}/src/so_magic}
